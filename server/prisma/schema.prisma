generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Employee {
  id                         Int                  @id @default(autoincrement())
  name                       String
  deskId                     Int?                 @unique
  email                      String?              @unique
  password                   String?              @default("")
  position                   String?
  role                       Role                 @default(USER)
  phone                      Int                  @default(12345678)
  isSupervisor               Boolean              @default(false)
  supervisorId               Int?
  supervisor                 Employee?            @relation("SupervisedEmployees", fields: [supervisorId], references: [id])
  supervisedEmployees        Employee[]           @relation("SupervisedEmployees")
  ActivityInvitationReceived ActivityInvitation[] @relation("InvitationsReceived")
  ActivityInvitationSent     ActivityInvitation[] @relation("InvitationsSent")
  response                   Response[]
  desk                       Desk?                @relation(fields: [deskId], references: [id])
  image                      String?
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @default(now()) @updatedAt
  Team                       Team?                @relation(fields: [teamId], references: [id])
  teamId                     Int?
}

model Team {
  id         Int        @id @default(autoincrement())
  name       String
  roomId     Int?
  stageId    Int?
  image      String?
  product    String?
  supervisor Employee[]
  Room       Room?      @relation(fields: [roomId], references: [id])
  Stage      Stage?     @relation(fields: [stageId], references: [id])
}

model Building {
  id     Int     @id @default(autoincrement())
  name   String  @default("immeuble")
  stages Stage[]
}

model Stage {
  id         Int       @id @default(autoincrement())
  name       String
  buildingId Int?
  image      String    @default("")
  rooms      Room[]
  Building   Building? @relation(fields: [buildingId], references: [id])
  teams      Team[]
}

model Room {
  id      Int    @id @default(autoincrement())
  name    String
  stageId Int
  image   String @default("")
  desks   Desk[]
  Stage   Stage  @relation(fields: [stageId], references: [id])
  teams   Team[]
}

model Desk {
  id       Int       @id @default(autoincrement())
  name     String
  roomId   Int
  Room     Room      @relation(fields: [roomId], references: [id])
  employee Employee?
}

model Question {
  id          Int        @id @default(autoincrement())
  question    String
  category    String?
  abreviation String?
  response    Response[]
}

model Response {
  id         Int       @id @default(autoincrement())
  response   String?
  employeeId Int?
  questionId Int?
  Employee   Employee? @relation(fields: [employeeId], references: [id])
  Question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Activity {
  id          Int                  @id @default(autoincrement())
  type        String
  image       String               @default("")
  invitations ActivityInvitation[]
}

model ActivityInvitation {
  id          Int               @id @default(autoincrement())
  activityId  Int?
  senderId    Int?
  recipientId Int?
  hasRead     Boolean           @default(false)
  status      InvitationStatus? @default(PENDING)
  date        DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  activity    Activity?         @relation(fields: [activityId], references: [id])
  recipient   Employee?         @relation("InvitationsReceived", fields: [recipientId], references: [id])
  sender      Employee?         @relation("InvitationsSent", fields: [senderId], references: [id])
}

enum Role {
  ADMIN
  USER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}
